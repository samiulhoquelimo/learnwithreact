generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           BigInt   @id @default(autoincrement())
  firstName    String   @db.VarChar(50)
  middleName   String   @db.VarChar(50)
  lastName     String   @db.VarChar(50)
  mobile       String   @db.VarChar(15)
  email        String   @db.VarChar(50)
  passwordHash String   @db.VarChar(32)
  registeredAt DateTime @default(now()) @db.Timestamp(0)
  lastLogin    DateTime @default(now()) @db.Timestamp(0)
  intro        String   @db.TinyText()
  profile      String   @db.Text()
  post         Post[]
}

model Post {
  id          BigInt        @id @default(autoincrement())
  authorId    BigInt        @db.UnsignedBigInt
  parentId    BigInt?
  title       String        @db.VarChar(75)
  metaTitle   String        @db.VarChar(100)
  slug        String        @db.VarChar(100)
  summary     String        @db.TinyText
  published   Int           @db.TinyInt
  createdAt   DateTime      @default(now()) @db.Timestamp(0)
  updatedAt   DateTime      @default(now()) @db.Timestamp(0)
  publishedAt DateTime      @default(now()) @db.Timestamp(0)
  content     String        @db.Text
  comments    PostComment[]
  tags        Tag[]
  categories  Category[]
  user        User?         @relation(fields: [authorId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  // post        post?          @relation(fields: [parentId], references: [id])
  // posts       post[]
}

model PostComment {
  id          BigInt   @id @default(autoincrement())
  postId      BigInt   @db.UnsignedBigInt
  parentId    BigInt?  @db.UnsignedBigInt
  title       String   @db.VarChar(100)
  published   Int      @db.TinyInt
  createdAt   DateTime @default(now()) @db.Timestamp(0)
  publishedAt DateTime @default(now()) @db.Timestamp(0)
  content     String   @db.Text
  post        Post     @relation(fields: [postId], references: [id])
  // post_comment  post_comment?  @relation(fields: [parentId], references: [id])
  // post_comments post_comment[]
}

model Tag {
  id        BigInt @id @default(autoincrement())
  title     String @db.VarChar(75)
  metaTitle String @db.VarChar(100)
  slug      String @db.VarChar(100)
  content   String @db.Text
  posts     Post[]
}

model PostMeta {
  id      BigInt @id @default(autoincrement())
  postId  BigInt @db.BigInt
  key     String @db.VarChar(50)
  content String @db.Text
}

model Category {
  id        BigInt @id @default(autoincrement())
  parentId  BigInt @db.UnsignedBigInt
  title     String @db.VarChar(75)
  metaTitle String @db.VarChar(100)
  slug      String @db.VarChar(100)
  content   String @db.Text
  posts     Post[]
  // category   category?  @relation(fields: [parentId], references: [id])
  // categories category[]
}
